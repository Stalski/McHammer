<?php
/*
 * @file
 *
 */

/**
 * Implements hook_menu().
 */
function mchammer_menu() {

  $items = array();

  $items['admin/structure/mchammer'] = array(
    'title' => 'MC HAMMER dashboard',
    'access arguments' => array('administer mail templates'),
    'page callback' => 'system_admin_menu_block_page',
    'position' => 'left',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
  );

  // List is taken over by CTools.
//
//  $items['admin/structure/mchammer/mail-template/add'] = array(
//    'title' => 'Add template',
//    'access arguments' => array('administer mail templates'),
//    'page callback' => 'mchammer_add_template',
//    'file' => 'includes/admin.inc',
//    'type' => MENU_LOCAL_TASK,
//  );
//
//  $items['admin/structure/mchammer/mail-template/%mail_template/panel_layout'] = array(
//    'title' => 'Panel layout',
//    'page callback' => 'mchammer_edit_layout',
//    'page arguments' => array(3),
//    'access arguments' => array('administer mail templates'),
//    'page callback' => 'mchammer_edit_layout',
//    'file' => 'includes/admin.inc',
//    'type' => MENU_LOCAL_TASK,
//    'weight' => 2,
//  );
//
//  $items['admin/structure/mchammer/mail-template/%mail_template/panel_content'] = array(
//    'title' => 'Panel content',
//    'page callback' => 'mchammer_edit_content',
//    'page arguments' => array(3),
//    'access arguments' => array('administer mail templates'),
//    'file' => 'includes/admin.inc',
//    'type' => MENU_LOCAL_TASK,
//    'weight' => 3,
//  );

  return $items;

}

/**
 * Implements hook_ctools_plugin_directory().
 */
function mchammer_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'export_ui') {
    return 'plugins/' . $plugin;
  }
}

/**
 * List callback to show templates through CTools.
 */
function mchammer_mail_template_names() {

  $names = array();
  ctools_include('export');
  foreach(ctools_export_crud_load_all('mchammer_mail_templates') as $template) {
    $names[$template->mtid] = $template->title;
  }

  return $names;

}
/**
 * Get the display cache for the panels_mini plugin.
 */
function _mchammer_panels_cache_get($key) {
  ctools_include('export-ui');
  $plugin = ctools_get_export_ui('mail_templates.export_ui');
  $handler = ctools_export_ui_get_handler($plugin);
  if (!$handler) {
    return;
  }

  $item = $handler->edit_cache_get($key);
  if (!$item) {
    $item = ctools_export_crud_load($handler->plugin['schema'], $key);
  }

  return array($handler, $item);
}

/**
 * Get display edit cache for the panels mini export UI
 *
 * The key is the second half of the key in this form:
 * panels_mini:TASK_NAME:HANDLER_NAME;
 */
function mchammer_panels_cache_get($key) {
  ctools_include('common', 'panels');
  list($handler, $item) = _mchammer_panels_cache_get($key);
  if (isset($item->mini_panels_display_cache)) {
    return $item->mini_panels_display_cache;
  }

  $cache = new stdClass();
  $cache->display = $item->display;
  $cache->display->context = ctools_context_load_contexts($item);
  $cache->display->cache_key = 'mchammer:' . $key;
  $cache->content_types = panels_common_get_allowed_types('mchammer', $cache->display->context);
  $cache->display_title = TRUE;

  // @TODO support locking
  $cache->locked = FALSE;

  return $cache;
}

/**
 * Store a display edit in progress in the page cache.
 */
function mchammer_panels_cache_set($key, $cache) {

  list($handler, $item) = _panels_mini_panels_cache_get($key);
  $item->mini_panels_display_cache = $cache;
  $handler->edit_cache_set_key($item, $key);
}

/**
 * Save all changes made to a display using the panels mini UI cache.
 */
function mchammer_panels_cache_clear($key, $cache) {

  list($handler, $item) = _panels_mini_panels_cache_get($key);
  $handler->edit_cache_clear($item);
}

/**
 * Save all changes made to a display using the panels mini UI cache.
 */
function mchammer_panels_cache_save($key, $cache) {
  list($handler, $item) = _panels_mini_panels_cache_get($key);
  $item->display = $cache->display;
  panels_mini_save($item);

  $handler->edit_cache_clear($item);
}

/**
 * Break the lock on a panels mini page.
 */
function mchammer_panels_cache_break_lock($key, $cache) {
}

/**
 * Implements hook_entity_info().
 */
function mchammer_entity_info() {

  $return['mail_template'] = array(
    'label' => t('Mail template'),
    'label callback' => 'entity_class_label',
    'entity class' => 'MailTemplateEntity',
    'controller class' => 'MailTemplateEntityController',
    'base table' => 'mchammer_mail_templates',
    'fieldable' => FALSE,
    'entity keys' => array(
      'id' => 'mtid',
      'title' => 'title',
    ),
    'access callback' => 'mail_template_access',
  );

  return $return;

}

/**
 * Implements hook_permission().
 */
function mchammer_permission() {
  return array(
    'administer mail templates' =>  array(
      'title' => t('Administer mail templates'),
      'description' => t('Add and edit mail templates.'),
    ),
  );
}

/**
 * Determines whether the given user has access to a mail.
 */
function mail_template_access() {
  return user_access('administer mail templates');
}

/**
 * Load multiple mail templates from the database.
 *
 * This function should be used whenever you need to load more than one entity
 * from the database. The entities are loaded into memory and will not require
 * database access if loaded again during the same page request.
 *
 * @see hook_entity_info()
 * @see RulesEntityController
 *
 * @param $ids
 *   An array of mail template ids.
 * @param $conditions
 *   An array of conditions in the form 'field' => $value.
 *
 * @return
 *   An array of mail templates indexed by their ids.
 */
function mail_template_load_multiple($ids = array(), $conditions = array()) {
  return entity_load('mail_template', $ids, $conditions);
}

/**
 * Loads a mail template.
 *
 * @return The mail_template entity or FALSE.
 */
function mail_template_load($item_id) {
  $result = mail_template_load_multiple(array($item_id));
  return $result ? reset($result) : FALSE;
}

/**
 * Write a mini panel to the database.
 */
function mchammer_mail_template_save(&$mail_template) {

  if (!empty($mail_template->display)) {
    $display = panels_save_display($mail_template->display);
    $mail_template->did = $display->did;
  }

  $update = (isset($mail_template->mtid) && $mail_template->mtid != 'new') ? array('mtid') : array();
  drupal_write_record('mchammer_mail_templates', $mail_template, $update);

  return $mail_template;

}